# -*- coding: utf-8 -*-
"""Untitled1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1wPSr-GLwh45DXk1R5476QcZg0f76BKwr
"""

import os
import json
import sys
from threading import Thread, Lock
from time import *

filepath = input("Please Provide the directory: ")

def path_check(filepath):
    user_location = filepath

    if os.path.exists(user_location):
        directory = user_location
    else:
        directory = "/"
        print("I am using current directiry...")
    return directory

path_check(filepath)

def delete_time(key):
    with open(path_check(filepath) + 'example.json','r') as json_file:
        json_decoded = json.load(json_file)
    get_time = [json_decoded.get(key)]
    if ((get_time[0][1]) < time()*1000):
        del json_decoded[key]
        with open(path_check(filepath)+'example.json', 'w') as json_file:
            json_decoded = json.dump(json_decoded, json_file, indent = 3)
        json_file.close()

def Write_in_new_file(key, js_object, given):
    given = (given * 1000)
    #millisec = dt_obj.timestamp() * 1000
    T_T_L = given + ( time() * 1000 )
    with open(path_check(filepath)+"example_new.json") as json_file:
        json_decoded1 = json.load(json_file)
    json_decoded1[key] = (json_object, T_T_L)
    with open(path_check(filepath)+"example_new.json", 'w') as json_file:
        json.dump(json_decoded1, json_file, indent=3)

def Create(key, json_object, given):
    given = (given * 1000)
    #millisec = dt_obj.timestamp() * 1000
    T_T_L = given + ( time() * 1000 )
    #print(millisec)
    if(type(key) != str):
        print("Error: Key must be a string")
        return
    if(len(key)>32):
        print("Error: Key must be less than 32 chars")
        return
    
    val = float(sys.getsizeof(json_object) / 1024)
    #print(val)
    if val>=16:
        print("File size Exceeds")
        return
    
    with open(path_check(filepath)+"example.json") as json_file:
        json_decoded = json.load(json_file)
        #print(type(json_decoded))
    if(key in json_decoded):
        delete_time(key)
    if(key in json_decoded):
        print("key is already present, use another key")
        return
    json_decoded[key] = (json_object, T_T_L)
    with open(path_check(filepath)+"example.json", 'w') as json_file:
        json.dump(json_decoded, json_file, indent=3)
        file_size = float(sys.getsizeof(json_file) / 1024*1024*1024)
        if file_size>1024*1024*1024:
            mutex.acquire()
            Write_in_new_file(key, js_object, given)
            mutex.release()
            Delete(key)
    json_file.close()

def Read(key):
    with open(path_check(filepath)+"example.json") as json_file:
        json_decoded = json.load(json_file)
    if(key not in json_decoded):
        print("key is not present, use a valid key")
        return
    #print(json_decoded[key])
    get_time = [json_decoded.get(key)]
    #print(get_time[0][1])
    #print(time()*1000)
    if ((get_time[0][1]) > time()*1000):
        value = json_decoded[key]
        json_file.close()
        return value
    else:
        delete_time(key)
        print("Key is expired !")

def Delete(key):
    with open(path_check(filepath)+'example.json','r') as json_file:
        json_decoded = json.load(json_file)
    if(key not in json_decoded):
        print("key is not present, use a valid key")
        return
    else:
        #json_decoded.pop(key)
        del json_decoded[key]
        with open(path_check(filepath)+'example.json', 'w') as json_file:
            json_decoded = json.dump(json_decoded, json_file, indent = 3)
    json_file.close()

#This needs to be done only for the first time because initially it can't be empty !
initial = {'user':"Hello Mr. User"}
#initial = json.dumps(initial)

#creating the example.json file at the given location!
with open(path_check(filepath)+"example.json", 'w') as json_file:
    json.dump(initial, json_file, indent=3)
    json_file.close()

key = input("Enter Key: ")

time_to_live = int(input("Enter time to live for the key: "))

js_object = {'company':'intel','course':'mtech','rank':'2'}
js_object=json.dumps(js_object,indent=3)

mutex = Lock()

mutex.acquire()
Create(key, js_object, time_to_live)
mutex.release()

mutex.acquire()
a = Read(key)
mutex.release()
a

mutex.acquire()
Delete(key)
mutex.release()

